import 'package:flutter/material.dart';
import 'package:dio/dio.dart';
import 'package:profanity_filter/profanity_filter.dart';
import 'package:image_picker/image_picker.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Text and Image Verification App',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(title: 'Text and Image Verification App'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  MyHomePage({Key? key, required this.title}) : super(key: key);

  final String title;

  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _textEditingController = TextEditingController();
  final _profanityFilter = ProfanityFilter();
  final _imagePicker = ImagePicker();
  String _imageVerificationResult = '';

  @override
  void dispose() {
    _textEditingController.dispose();
    super.dispose();
  }

  Future<void> _verifyImage(File imageFile) async {
    try {
      final response = await Dio().post(
        'http://your-server-url.com/api/verify-image',
        data: FormData.fromMap({
          'image': await MultipartFile.fromFile(imageFile.path, filename: 'image.png'),
        }),
        options: Options(
          headers: {'Content-Type': 'multipart/form-data'},
        ),
      );
      setState(() {
        _imageVerificationResult = response.data;
      });
    } catch (error) {
      print(error);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.title),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            TextField(
              controller: _textEditingController,
              decoration: InputDecoration(
                hintText: 'Enter text',
                errorText: _profanityFilter.hasProfanity(_textEditingController.text) ? 'Input contains bad words' : null,
              ),
            ),
            SizedBox(height: 16.0),
            ElevatedButton(
              onPressed: () async {
                final imageFile = await _imagePicker.getImage(source: ImageSource.gallery);
                if (imageFile != null) {
                  _verifyImage(File(imageFile.path));
                }
              },
              child: Text('Upload Image'),
            ),
            if (_imageVerificationResult.isNotEmpty)
              Text(_imageVerificationResult),
          ],
        ),
      ),
    );
  }
}
